package com.github.kothapet.scs.config;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.context.annotation.Profile;

import com.amazonaws.auth.AWSStaticCredentialsProvider;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.client.builder.AwsClientBuilder;
import com.amazonaws.services.cloudwatch.AmazonCloudWatchAsync;
import com.amazonaws.services.cloudwatch.AmazonCloudWatchAsyncClientBuilder;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBAsync;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBAsyncClientBuilder;
import com.amazonaws.services.kinesis.AmazonKinesisAsync;
import com.amazonaws.services.kinesis.AmazonKinesisAsyncClientBuilder;

@Configuration
@Profile("local")
public class AwsConfigLocal {

	@Value("${spring.cloud.aws.region.static}")
	private String region;

	@Value("${spring.cloud.aws.endpoint}")
	private String kinesisEndpoint;

	@Value("${spring.cloud.aws.dynamodb.endpoint}")
	private String dynamoDbEndpoint;

	@Value("${spring.cloud.aws.cloudwatch.endpoint}")
	private String cloudWatchEndpoint;
	
	@Value("${spring.cloud.aws.credentials.access-key}")  
	private String accessKey;
	
	@Value("${spring.cloud.aws.credentials.secret-key}")  
	private String secretKey;


    private AWSStaticCredentialsProvider getCredentialsProvider() {
        return new AWSStaticCredentialsProvider(new BasicAWSCredentials(accessKey, secretKey));
    }
	  
	@Bean
	public AmazonKinesisAsync amazonKinesisAsync() {
		return AmazonKinesisAsyncClientBuilder.standard()
				.withCredentials(getCredentialsProvider())
				.withEndpointConfiguration(new AwsClientBuilder.EndpointConfiguration(kinesisEndpoint, region)).build();
	}

	@Bean
	@Primary
	public AmazonDynamoDBAsync amazonDynamoDbAsync() {
		return AmazonDynamoDBAsyncClientBuilder.standard()
				.withCredentials(getCredentialsProvider())
				.withEndpointConfiguration(new AwsClientBuilder.EndpointConfiguration(dynamoDbEndpoint, region))
				.build();
	}

	@Bean
	public AmazonCloudWatchAsync amazonCloudWatchAsync() {
		return AmazonCloudWatchAsyncClientBuilder.standard()
				.withCredentials(getCredentialsProvider())
				.withEndpointConfiguration(new AwsClientBuilder.EndpointConfiguration(cloudWatchEndpoint, region))
				.build();
	}

}